package com.merrichat.net.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.merrichat.net.model.UserModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MODEL".
*/
public class UserModelDao extends AbstractDao<UserModel, Long> {

    public static final String TABLENAME = "USER_MODEL";

    /**
     * Properties of entity UserModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property MemberId = new Property(1, String.class, "memberId", false, "MEMBER_ID");
        public final static Property AccountId = new Property(2, String.class, "accountId", false, "ACCOUNT_ID");
        public final static Property Gender = new Property(3, String.class, "gender", false, "GENDER");
        public final static Property ImgUrl = new Property(4, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Binding = new Property(5, String.class, "binding", false, "BIN_DING");
        public final static Property Mobile = new Property(6, String.class, "mobile", false, "MOBILE");
        public final static Property Realname = new Property(7, String.class, "realname", false, "REAL_NAME");
        public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
        public final static Property UserFlag = new Property(9, String.class, "userFlag", false, "USER_FLAG");
        public final static Property WeixinAccountId = new Property(10, String.class, "weixinAccountId", false, "WX_ACCOUNT_ID");
        public final static Property IsLogin = new Property(11, boolean.class, "isLogin", false, "IS_LOGIN");
        public final static Property MobMemberLoginId = new Property(12, String.class, "mobMemberLoginId", false, "MOB_MEMBER_LOGIN_ID");
        public final static Property Signature = new Property(13, String.class, "signature", false, "SIGNATURE");
        public final static Property Birthday = new Property(14, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Tuijianren = new Property(15, String.class, "tuijianren", false, "TUIJIANREN");
        public final static Property RegistTime = new Property(16, String.class, "registTime", false, "REGIST_TIME");
        public final static Property AccessToken = new Property(17, String.class, "accessToken", false, "ACCESS_TOKEN");
        public final static Property RefreshToken = new Property(18, String.class, "refreshToken", false, "REFRESH_TOKEN");
        public final static Property UploadFlag = new Property(19, String.class, "uploadFlag", false, "UPLOADFLAG");
    }


    public UserModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"MEMBER_ID\" TEXT," + // 1: memberId
                "\"ACCOUNT_ID\" TEXT," + // 2: accountId
                "\"GENDER\" TEXT," + // 3: gender
                "\"IMG_URL\" TEXT," + // 4: imgUrl
                "\"BIN_DING\" TEXT," + // 5: binding
                "\"MOBILE\" TEXT," + // 6: mobile
                "\"REAL_NAME\" TEXT," + // 7: realname
                "\"STATUS\" TEXT," + // 8: status
                "\"USER_FLAG\" TEXT," + // 9: userFlag
                "\"WX_ACCOUNT_ID\" TEXT," + // 10: weixinAccountId
                "\"IS_LOGIN\" INTEGER NOT NULL ," + // 11: isLogin
                "\"MOB_MEMBER_LOGIN_ID\" TEXT," + // 12: mobMemberLoginId
                "\"SIGNATURE\" TEXT," + // 13: signature
                "\"BIRTHDAY\" TEXT," + // 14: birthday
                "\"TUIJIANREN\" TEXT," + // 15: tuijianren
                "\"REGIST_TIME\" TEXT," + // 16: registTime
                "\"ACCESS_TOKEN\" TEXT," + // 17: accessToken
                "\"REFRESH_TOKEN\" TEXT," + // 18: refreshToken
                "\"UPLOADFLAG\" TEXT);"); // 19: uploadFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(2, memberId);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(3, accountId);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String binding = entity.getBinding();
        if (binding != null) {
            stmt.bindString(6, binding);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(8, realname);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
 
        String userFlag = entity.getUserFlag();
        if (userFlag != null) {
            stmt.bindString(10, userFlag);
        }
 
        String weixinAccountId = entity.getWeixinAccountId();
        if (weixinAccountId != null) {
            stmt.bindString(11, weixinAccountId);
        }
        stmt.bindLong(12, entity.getIsLogin() ? 1L: 0L);
 
        String mobMemberLoginId = entity.getMobMemberLoginId();
        if (mobMemberLoginId != null) {
            stmt.bindString(13, mobMemberLoginId);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(14, signature);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(15, birthday);
        }
 
        String tuijianren = entity.getTuijianren();
        if (tuijianren != null) {
            stmt.bindString(16, tuijianren);
        }
 
        String registTime = entity.getRegistTime();
        if (registTime != null) {
            stmt.bindString(17, registTime);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(18, accessToken);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(19, refreshToken);
        }
 
        String uploadFlag = entity.getUploadFlag();
        if (uploadFlag != null) {
            stmt.bindString(20, uploadFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(2, memberId);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(3, accountId);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String binding = entity.getBinding();
        if (binding != null) {
            stmt.bindString(6, binding);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(8, realname);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
 
        String userFlag = entity.getUserFlag();
        if (userFlag != null) {
            stmt.bindString(10, userFlag);
        }
 
        String weixinAccountId = entity.getWeixinAccountId();
        if (weixinAccountId != null) {
            stmt.bindString(11, weixinAccountId);
        }
        stmt.bindLong(12, entity.getIsLogin() ? 1L: 0L);
 
        String mobMemberLoginId = entity.getMobMemberLoginId();
        if (mobMemberLoginId != null) {
            stmt.bindString(13, mobMemberLoginId);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(14, signature);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(15, birthday);
        }
 
        String tuijianren = entity.getTuijianren();
        if (tuijianren != null) {
            stmt.bindString(16, tuijianren);
        }
 
        String registTime = entity.getRegistTime();
        if (registTime != null) {
            stmt.bindString(17, registTime);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(18, accessToken);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(19, refreshToken);
        }
 
        String uploadFlag = entity.getUploadFlag();
        if (uploadFlag != null) {
            stmt.bindString(20, uploadFlag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserModel readEntity(Cursor cursor, int offset) {
        UserModel entity = new UserModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // memberId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accountId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // binding
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // realname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userFlag
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // weixinAccountId
            cursor.getShort(offset + 11) != 0, // isLogin
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mobMemberLoginId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // signature
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // birthday
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // tuijianren
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // registTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // accessToken
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // refreshToken
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // uploadFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccountId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBinding(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRealname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserFlag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeixinAccountId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsLogin(cursor.getShort(offset + 11) != 0);
        entity.setMobMemberLoginId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSignature(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBirthday(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTuijianren(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRegistTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAccessToken(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRefreshToken(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUploadFlag(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserModel entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
