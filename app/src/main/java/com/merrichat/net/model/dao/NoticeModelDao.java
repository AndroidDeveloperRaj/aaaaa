package com.merrichat.net.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.merrichat.net.model.NoticeModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTICE_MODEL".
*/
public class NoticeModelDao extends AbstractDao<NoticeModel, Long> {

    public static final String TABLENAME = "NOTICE_MODEL";

    /**
     * Properties of entity NoticeModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Uid = new Property(1, long.class, "uid", false, "UID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property PushTime = new Property(4, long.class, "pushTime", false, "PUSH_TIME");
        public final static Property Success = new Property(5, boolean.class, "success", false, "SUCCESS");
        public final static Property OpenFlag = new Property(6, int.class, "openFlag", false, "OPEN_FLAG");
        public final static Property AccountStatus = new Property(7, String.class, "accountStatus", false, "ACCOUNT_STATUS");
        public final static Property MemberId = new Property(8, String.class, "memberId", false, "MEMBER_ID");
    }


    public NoticeModelDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTICE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"CONTENT\" TEXT," + // 2: content
                "\"TITLE\" TEXT," + // 3: title
                "\"PUSH_TIME\" INTEGER NOT NULL ," + // 4: pushTime
                "\"SUCCESS\" INTEGER NOT NULL ," + // 5: success
                "\"OPEN_FLAG\" INTEGER NOT NULL ," + // 6: openFlag
                "\"ACCOUNT_STATUS\" TEXT," + // 7: accountStatus
                "\"MEMBER_ID\" TEXT);"); // 8: memberId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTICE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoticeModel entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUid());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getPushTime());
        stmt.bindLong(6, entity.getSuccess() ? 1L: 0L);
        stmt.bindLong(7, entity.getOpenFlag());
 
        String accountStatus = entity.getAccountStatus();
        if (accountStatus != null) {
            stmt.bindString(8, accountStatus);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(9, memberId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoticeModel entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUid());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getPushTime());
        stmt.bindLong(6, entity.getSuccess() ? 1L: 0L);
        stmt.bindLong(7, entity.getOpenFlag());
 
        String accountStatus = entity.getAccountStatus();
        if (accountStatus != null) {
            stmt.bindString(8, accountStatus);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(9, memberId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoticeModel readEntity(Cursor cursor, int offset) {
        NoticeModel entity = new NoticeModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getLong(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.getLong(offset + 4), // pushTime
            cursor.getShort(offset + 5) != 0, // success
            cursor.getInt(offset + 6), // openFlag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // accountStatus
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // memberId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoticeModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getLong(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPushTime(cursor.getLong(offset + 4));
        entity.setSuccess(cursor.getShort(offset + 5) != 0);
        entity.setOpenFlag(cursor.getInt(offset + 6));
        entity.setAccountStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMemberId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoticeModel entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoticeModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoticeModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
