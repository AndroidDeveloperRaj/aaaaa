package com.merrichat.net.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.merrichat.net.model.MessageModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_MODEL".
*/
public class MessageModelDao extends AbstractDao<MessageModel, Long> {

    public static final String TABLENAME = "MESSAGE_MODEL";

    /**
     * Properties of entity MessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Mid = new Property(1, String.class, "mid", false, "mid");
        public final static Property Revoke = new Property(2, String.class, "revoke", false, "revoke");
        public final static Property Type = new Property(3, String.class, "type", false, "type");
        public final static Property Title = new Property(4, String.class, "title", false, "title");
        public final static Property Content = new Property(5, String.class, "content", false, "content");
        public final static Property Sender = new Property(6, String.class, "sender", false, "sender");
        public final static Property SenderName = new Property(7, String.class, "senderName", false, "senderName");
        public final static Property Receiver = new Property(8, String.class, "receiver", false, "receiver");
        public final static Property ReceiverName = new Property(9, String.class, "receiverName", false, "receiverName");
        public final static Property File = new Property(10, String.class, "file", false, "file");
        public final static Property SpeechTimeLength = new Property(11, String.class, "speechTimeLength", false, "speech_time_length");
        public final static Property FilePath = new Property(12, String.class, "filePath", false, "file_path");
        public final static Property FileType = new Property(13, String.class, "fileType", false, "fileType");
        public final static Property Format = new Property(14, String.class, "format", false, "format");
        public final static Property Timestamp = new Property(15, long.class, "timestamp", false, "timestamp");
        public final static Property GroupId = new Property(16, String.class, "groupId", false, "groupId");
        public final static Property Group = new Property(17, String.class, "group", false, "group_name");
        public final static Property Logo = new Property(18, String.class, "logo", false, "logo");
        public final static Property Header = new Property(19, String.class, "header", false, "header");
        public final static Property SendState = new Property(20, int.class, "sendState", false, "send_state");
        public final static Property Thumb = new Property(21, String.class, "thumb", false, "thumb");
        public final static Property ShowTimeState = new Property(22, int.class, "showTimeState", false, "showTimeState");
        public final static Property IsReadVoice = new Property(23, boolean.class, "isReadVoice", false, "is_read_voice");
        public final static Property Inter = new Property(24, String.class, "inter", false, "inter");
        public final static Property Top = new Property(25, String.class, "top", false, "top");
        public final static Property Topts = new Property(26, String.class, "topts", false, "topts");
        public final static Property Private_id = new Property(27, String.class, "private_id", false, "private_id");
        public final static Property New_1 = new Property(28, String.class, "new_1", false, "new_1");
        public final static Property New_2 = new Property(29, String.class, "new_2", false, "new_2");
        public final static Property New_3 = new Property(30, String.class, "new_3", false, "new_3");
        public final static Property TypeRevoke = new Property(31, String.class, "typeRevoke", false, "typeRevoke");
        public final static Property RedTid = new Property(32, String.class, "redTid", false, "redTid");
        public final static Property RedStatus = new Property(33, String.class, "redStatus", false, "redStatus");
    }


    public MessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public MessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"mid\" TEXT," + // 1: mid
                "\"revoke\" TEXT," + // 2: revoke
                "\"type\" TEXT," + // 3: type
                "\"title\" TEXT," + // 4: title
                "\"content\" TEXT," + // 5: content
                "\"sender\" TEXT," + // 6: sender
                "\"senderName\" TEXT," + // 7: senderName
                "\"receiver\" TEXT," + // 8: receiver
                "\"receiverName\" TEXT," + // 9: receiverName
                "\"file\" TEXT," + // 10: file
                "\"speech_time_length\" TEXT," + // 11: speechTimeLength
                "\"file_path\" TEXT," + // 12: filePath
                "\"fileType\" TEXT," + // 13: fileType
                "\"format\" TEXT," + // 14: format
                "\"timestamp\" INTEGER NOT NULL ," + // 15: timestamp
                "\"groupId\" TEXT," + // 16: groupId
                "\"group_name\" TEXT," + // 17: group
                "\"logo\" TEXT," + // 18: logo
                "\"header\" TEXT," + // 19: header
                "\"send_state\" INTEGER NOT NULL ," + // 20: sendState
                "\"thumb\" TEXT," + // 21: thumb
                "\"showTimeState\" INTEGER NOT NULL ," + // 22: showTimeState
                "\"is_read_voice\" INTEGER NOT NULL ," + // 23: isReadVoice
                "\"inter\" TEXT," + // 24: inter
                "\"top\" TEXT," + // 25: top
                "\"topts\" TEXT," + // 26: topts
                "\"private_id\" TEXT," + // 27: private_id
                "\"new_1\" TEXT," + // 28: new_1
                "\"new_2\" TEXT," + // 29: new_2
                "\"new_3\" TEXT," + // 30: new_3
                "\"typeRevoke\" TEXT," + // 31: typeRevoke
                "\"redTid\" TEXT," + // 32: redTid
                "\"redStatus\" TEXT);"); // 33: redStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageModel entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(2, mid);
        }
 
        String revoke = entity.getRevoke();
        if (revoke != null) {
            stmt.bindString(3, revoke);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(7, sender);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(8, senderName);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(9, receiver);
        }
 
        String receiverName = entity.getReceiverName();
        if (receiverName != null) {
            stmt.bindString(10, receiverName);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(11, file);
        }
 
        String speechTimeLength = entity.getSpeechTimeLength();
        if (speechTimeLength != null) {
            stmt.bindString(12, speechTimeLength);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(13, filePath);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(14, fileType);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(15, format);
        }
        stmt.bindLong(16, entity.getTimestamp());
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(17, groupId);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(18, group);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(19, logo);
        }
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(20, header);
        }
        stmt.bindLong(21, entity.getSendState());
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(22, thumb);
        }
        stmt.bindLong(23, entity.getShowTimeState());
        stmt.bindLong(24, entity.getIsReadVoice() ? 1L: 0L);
 
        String inter = entity.getInter();
        if (inter != null) {
            stmt.bindString(25, inter);
        }
 
        String top = entity.getTop();
        if (top != null) {
            stmt.bindString(26, top);
        }
 
        String topts = entity.getTopts();
        if (topts != null) {
            stmt.bindString(27, topts);
        }
 
        String private_id = entity.getPrivate_id();
        if (private_id != null) {
            stmt.bindString(28, private_id);
        }
 
        String new_1 = entity.getNew_1();
        if (new_1 != null) {
            stmt.bindString(29, new_1);
        }
 
        String new_2 = entity.getNew_2();
        if (new_2 != null) {
            stmt.bindString(30, new_2);
        }
 
        String new_3 = entity.getNew_3();
        if (new_3 != null) {
            stmt.bindString(31, new_3);
        }
 
        String typeRevoke = entity.getTypeRevoke();
        if (typeRevoke != null) {
            stmt.bindString(32, typeRevoke);
        }
 
        String redTid = entity.getRedTid();
        if (redTid != null) {
            stmt.bindString(33, redTid);
        }
 
        String redStatus = entity.getRedStatus();
        if (redStatus != null) {
            stmt.bindString(34, redStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageModel entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(2, mid);
        }
 
        String revoke = entity.getRevoke();
        if (revoke != null) {
            stmt.bindString(3, revoke);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(7, sender);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(8, senderName);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(9, receiver);
        }
 
        String receiverName = entity.getReceiverName();
        if (receiverName != null) {
            stmt.bindString(10, receiverName);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(11, file);
        }
 
        String speechTimeLength = entity.getSpeechTimeLength();
        if (speechTimeLength != null) {
            stmt.bindString(12, speechTimeLength);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(13, filePath);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(14, fileType);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(15, format);
        }
        stmt.bindLong(16, entity.getTimestamp());
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(17, groupId);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(18, group);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(19, logo);
        }
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(20, header);
        }
        stmt.bindLong(21, entity.getSendState());
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(22, thumb);
        }
        stmt.bindLong(23, entity.getShowTimeState());
        stmt.bindLong(24, entity.getIsReadVoice() ? 1L: 0L);
 
        String inter = entity.getInter();
        if (inter != null) {
            stmt.bindString(25, inter);
        }
 
        String top = entity.getTop();
        if (top != null) {
            stmt.bindString(26, top);
        }
 
        String topts = entity.getTopts();
        if (topts != null) {
            stmt.bindString(27, topts);
        }
 
        String private_id = entity.getPrivate_id();
        if (private_id != null) {
            stmt.bindString(28, private_id);
        }
 
        String new_1 = entity.getNew_1();
        if (new_1 != null) {
            stmt.bindString(29, new_1);
        }
 
        String new_2 = entity.getNew_2();
        if (new_2 != null) {
            stmt.bindString(30, new_2);
        }
 
        String new_3 = entity.getNew_3();
        if (new_3 != null) {
            stmt.bindString(31, new_3);
        }
 
        String typeRevoke = entity.getTypeRevoke();
        if (typeRevoke != null) {
            stmt.bindString(32, typeRevoke);
        }
 
        String redTid = entity.getRedTid();
        if (redTid != null) {
            stmt.bindString(33, redTid);
        }
 
        String redStatus = entity.getRedStatus();
        if (redStatus != null) {
            stmt.bindString(34, redStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageModel readEntity(Cursor cursor, int offset) {
        MessageModel entity = new MessageModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // revoke
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // senderName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // receiver
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // receiverName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // file
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // speechTimeLength
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // filePath
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fileType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // format
            cursor.getLong(offset + 15), // timestamp
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // groupId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // group
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // logo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // header
            cursor.getInt(offset + 20), // sendState
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // thumb
            cursor.getInt(offset + 22), // showTimeState
            cursor.getShort(offset + 23) != 0, // isReadVoice
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // inter
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // top
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // topts
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // private_id
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // new_1
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // new_2
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // new_3
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // typeRevoke
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // redTid
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // redStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRevoke(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSender(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSenderName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReceiver(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReceiverName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFile(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSpeechTimeLength(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFilePath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFileType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFormat(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTimestamp(cursor.getLong(offset + 15));
        entity.setGroupId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setGroup(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLogo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHeader(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSendState(cursor.getInt(offset + 20));
        entity.setThumb(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setShowTimeState(cursor.getInt(offset + 22));
        entity.setIsReadVoice(cursor.getShort(offset + 23) != 0);
        entity.setInter(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTop(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTopts(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPrivate_id(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setNew_1(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setNew_2(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setNew_3(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setTypeRevoke(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setRedTid(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setRedStatus(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageModel entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
