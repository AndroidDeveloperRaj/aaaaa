package com.merrichat.net.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.merrichat.net.model.MessageListModle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_LIST_MODLE".
*/
public class MessageListModleDao extends AbstractDao<MessageListModle, Long> {

    public static final String TABLENAME = "MESSAGE_LIST_MODLE";

    /**
     * Properties of entity MessageListModle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Count = new Property(1, int.class, "count", false, "count");
        public final static Property FileType = new Property(2, String.class, "fileType", false, "fileType");
        public final static Property HeadUrl = new Property(3, String.class, "headUrl", false, "headUrl");
        public final static Property Inter = new Property(4, int.class, "inter", false, "inter");
        public final static Property Last = new Property(5, String.class, "last", false, "last");
        public final static Property Msgts = new Property(6, long.class, "msgts", false, "msgts");
        public final static Property Name = new Property(7, String.class, "name", false, "name");
        public final static Property SenderId = new Property(8, String.class, "senderId", false, "senderId");
        public final static Property Top = new Property(9, int.class, "top", false, "top");
        public final static Property Topts = new Property(10, String.class, "topts", false, "topts");
        public final static Property Type = new Property(11, String.class, "type", false, "type");
        public final static Property Group = new Property(12, String.class, "group", false, "group_name");
        public final static Property GroupId = new Property(13, String.class, "groupId", false, "groupId");
        public final static Property PrivateID = new Property(14, String.class, "privateID", false, "privateID");
        public final static Property Text1 = new Property(15, String.class, "text1", false, "Test1");
        public final static Property Test2 = new Property(16, String.class, "test2", false, "Test2");
        public final static Property Test3 = new Property(17, String.class, "test3", false, "Test3");
    }


    public MessageListModleDao(DaoConfig config) {
        super(config);
    }
    
    public MessageListModleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_LIST_MODLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"count\" INTEGER NOT NULL ," + // 1: count
                "\"fileType\" TEXT," + // 2: fileType
                "\"headUrl\" TEXT," + // 3: headUrl
                "\"inter\" INTEGER NOT NULL ," + // 4: inter
                "\"last\" TEXT," + // 5: last
                "\"msgts\" INTEGER NOT NULL ," + // 6: msgts
                "\"name\" TEXT," + // 7: name
                "\"senderId\" TEXT," + // 8: senderId
                "\"top\" INTEGER NOT NULL ," + // 9: top
                "\"topts\" TEXT," + // 10: topts
                "\"type\" TEXT," + // 11: type
                "\"group_name\" TEXT," + // 12: group
                "\"groupId\" TEXT," + // 13: groupId
                "\"privateID\" TEXT," + // 14: privateID
                "\"Test1\" TEXT," + // 15: text1
                "\"Test2\" TEXT," + // 16: test2
                "\"Test3\" TEXT);"); // 17: test3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_LIST_MODLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageListModle entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getCount());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(3, fileType);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(4, headUrl);
        }
        stmt.bindLong(5, entity.getInter());
 
        String last = entity.getLast();
        if (last != null) {
            stmt.bindString(6, last);
        }
        stmt.bindLong(7, entity.getMsgts());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(9, senderId);
        }
        stmt.bindLong(10, entity.getTop());
 
        String topts = entity.getTopts();
        if (topts != null) {
            stmt.bindString(11, topts);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(13, group);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(14, groupId);
        }
 
        String privateID = entity.getPrivateID();
        if (privateID != null) {
            stmt.bindString(15, privateID);
        }
 
        String text1 = entity.getText1();
        if (text1 != null) {
            stmt.bindString(16, text1);
        }
 
        String test2 = entity.getTest2();
        if (test2 != null) {
            stmt.bindString(17, test2);
        }
 
        String test3 = entity.getTest3();
        if (test3 != null) {
            stmt.bindString(18, test3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageListModle entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getCount());
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(3, fileType);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(4, headUrl);
        }
        stmt.bindLong(5, entity.getInter());
 
        String last = entity.getLast();
        if (last != null) {
            stmt.bindString(6, last);
        }
        stmt.bindLong(7, entity.getMsgts());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(9, senderId);
        }
        stmt.bindLong(10, entity.getTop());
 
        String topts = entity.getTopts();
        if (topts != null) {
            stmt.bindString(11, topts);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(13, group);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(14, groupId);
        }
 
        String privateID = entity.getPrivateID();
        if (privateID != null) {
            stmt.bindString(15, privateID);
        }
 
        String text1 = entity.getText1();
        if (text1 != null) {
            stmt.bindString(16, text1);
        }
 
        String test2 = entity.getTest2();
        if (test2 != null) {
            stmt.bindString(17, test2);
        }
 
        String test3 = entity.getTest3();
        if (test3 != null) {
            stmt.bindString(18, test3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageListModle readEntity(Cursor cursor, int offset) {
        MessageListModle entity = new MessageListModle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // count
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headUrl
            cursor.getInt(offset + 4), // inter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // last
            cursor.getLong(offset + 6), // msgts
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // senderId
            cursor.getInt(offset + 9), // top
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // topts
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // group
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // groupId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // privateID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // text1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // test2
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // test3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageListModle entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCount(cursor.getInt(offset + 1));
        entity.setFileType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInter(cursor.getInt(offset + 4));
        entity.setLast(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMsgts(cursor.getLong(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSenderId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTop(cursor.getInt(offset + 9));
        entity.setTopts(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGroup(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGroupId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPrivateID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setText1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTest2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTest3(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageListModle entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageListModle entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageListModle entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
