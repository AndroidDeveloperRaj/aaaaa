package com.merrichat.net.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.merrichat.net.model.DraftDaoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRAFT_DAO_MODEL".
*/
public class DraftDaoModelDao extends AbstractDao<DraftDaoModel, Long> {

    public static final String TABLENAME = "DRAFT_DAO_MODEL";

    /**
     * Properties of entity DraftDaoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property TuWenDraft = new Property(1, String.class, "tuWenDraft", false, "TU_WEN_DRAFT");
        public final static Property VideoDraft = new Property(2, String.class, "videoDraft", false, "VIDEO_DRAFT");
    }


    public DraftDaoModelDao(DaoConfig config) {
        super(config);
    }
    
    public DraftDaoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRAFT_DAO_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"TU_WEN_DRAFT\" TEXT," + // 1: tuWenDraft
                "\"VIDEO_DRAFT\" TEXT);"); // 2: videoDraft
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRAFT_DAO_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DraftDaoModel entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String tuWenDraft = entity.getTuWenDraft();
        if (tuWenDraft != null) {
            stmt.bindString(2, tuWenDraft);
        }
 
        String videoDraft = entity.getVideoDraft();
        if (videoDraft != null) {
            stmt.bindString(3, videoDraft);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DraftDaoModel entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String tuWenDraft = entity.getTuWenDraft();
        if (tuWenDraft != null) {
            stmt.bindString(2, tuWenDraft);
        }
 
        String videoDraft = entity.getVideoDraft();
        if (videoDraft != null) {
            stmt.bindString(3, videoDraft);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DraftDaoModel readEntity(Cursor cursor, int offset) {
        DraftDaoModel entity = new DraftDaoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tuWenDraft
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // videoDraft
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DraftDaoModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTuWenDraft(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideoDraft(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DraftDaoModel entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DraftDaoModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DraftDaoModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
